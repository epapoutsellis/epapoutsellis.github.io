<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="epapoutsellis/feed.xml" rel="self" type="application/atom+xml" /><link href="epapoutsellis/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-06-07T08:40:08+00:00</updated><id>epapoutsellis/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">CIL on the Cloud</title><link href="epapoutsellis/blog/2023/cil-colab/" rel="alternate" type="text/html" title="CIL on the Cloud" /><published>2023-06-06T15:59:00+00:00</published><updated>2023-06-06T15:59:00+00:00</updated><id>epapoutsellis/blog/2023/cil-colab</id><content type="html" xml:base="epapoutsellis/blog/2023/cil-colab/"><![CDATA[<p>In this blog, we will demonstrate how to use the Core Imaging Library (CIL), an open source software for imaging inverse problems, on cloud platforms like Binder and Google Colab. These platforms offer cloud-based environments with pre-installed packages and resources, making them highly suitable for teaching and training purposes. In addition, if you do not have a GPU or you are a macOS user without GPU or without the right GPU these cloud platforms serve as an excellent alternative. Or maybe you lost connection to your Windows/Linux remote machines and you really want to reconstruct a tomographic dataset.</p>

<h2 id="outline">Outline</h2>
<ul>
  <li><a href="#section1">What is CIL?</a></li>
  <li><a href="#section2">Cloud platforms: Google Colab and Binder</a>
    <ul>
      <li><a href="#subsection21">Binder or Colab</a></li>
    </ul>
  </li>
  <li><a href="#section3">Install CIL on Colab</a>
    <ul>
      <li><a href="#subsection31">Check Python version</a></li>
      <li><a href="#subsection32">Install TIGRE</a></li>
      <li><a href="#subsection33">Install CondaColab</a></li>
      <li><a href="#subsection34">Install Conda</a></li>
      <li><a href="#subsection35">Install CIL</a></li>
    </ul>
  </li>
  <li><a href="#section4">Tomography reconstruction using CIL</a>
    <ul>
      <li><a href="#subsection41">Import CIL</a></li>
      <li><a href="#subsection42">Import Tomography backends</a></li>
      <li><a href="#subsection43">Load and examine real 3D dataset</a></li>
      <li><a href="#subsection44">Preprocess Acquisition Data</a></li>
      <li><a href="#subsection45">Run analytic reconstruction: FBP using Astra and Tigre</a></li>
      <li><a href="#subsection46">Run Model-Based iterative reconstruction: Total variation reconstruction</a></li>
      <li><a href="#subsection47">Discussion</a></li>
    </ul>
  </li>
  <li><a href="#section5">CIL Demos on Colab</a></li>
</ul>

<h2 id="what-is-cil--">What is CIL?  <a class="anchor" id="section1"></a></h2>

<p>The Core Imaging Library or CIL is an open-source Python framework for solving inverse problems in imaging with particular emphasis on tomographic imaging and reconstruction. It is supported by the <a href="https://ccpi.ac.uk/">Collaborative Computational Project in Tomographic Imaging (CCPi)</a>, a UK academic network, which unites expertise in the field of Computed Tomography (CT). Its aim is to provide the community with software to increase the quality and level of information that can be extracted by CT, with an emphasis in software sustainability, maintainability and distribution.</p>

<p>To learn more about CIL, please check the links below.</p>

<ul>
  <li><strong>Github Repositories</strong>
    <ul>
      <li><a href="https://github.com/TomographicImaging/CIL">CIL</a></li>
      <li><a href="https://github.com/TomographicImaging/CIL-Demos">CIL-Demos</a></li>
    </ul>
  </li>
  <li><strong>Software Papers</strong>
    <ul>
      <li><a href="https://royalsocietypublishing.org/doi/abs/10.1098/rsta.2020.0192">Core Imaging Library–Part I: a versatile Python framework for tomographic imaging</a>. <a href="https://github.com/TomographicImaging/Paper-2021-RSTA-CIL-Part-I">Code</a></li>
      <li><a href="https://royalsocietypublishing.org/doi/abs/10.1098/rsta.2020.0193">Core Imaging Library–Part II: Multichannel reconstruction for dynamic and spectral tomography</a>. <a href="https://github.com/TomographicImaging/Paper-2021-RSTA-CIL-Part-II">Code</a></li>
    </ul>
  </li>
  <li><strong>Talks and Posters</strong>
    <ul>
      <li><a href="https://www.youtube.com/watch?v=Xd4erPj0uEs">PyCon DE &amp; PyData Berlin 2022</a></li>
      <li><a href="https://epapoutsellis.github.io/assets/pdf/poster_STEM_for_Britain.pdf">STEM for Britain Poster, Finalist Mathematics Section, 2020</a></li>
      <li><a href="https://editor.postreality.io/view/addf28cc-2830-11ec-966e-d792f7fbd6cb">Augmented Reality Poster</a></li>
    </ul>
  </li>
</ul>

<p>To join the CIL community, you can register at our <a href="https://discord.com/invite/9NTWu9MEGq">Discord channel</a>.</p>

<h2 id="cloud-platforms-">Cloud platforms <a class="anchor" id="section2"></a></h2>

<p>In addition to the local installation available via conda, see <a href="https://github.com/TomographicImaging/CIL#installation-of-cil">here</a>, we have two alternatives to use CIL on the cloud: 1) Binder and 2) Google Colab.</p>

<ul>
  <li>
    <p>Binder: The <a href="https://mybinder.readthedocs.io/en/latest/#">Binder Project</a> offers an easy place to create sharable, interactive, reproducible computing environments. Using the <a href="https://mybinder.org/">mybinder.org</a> platform we transform a github repository into a collection of interactive notebooks without any installation. So, you are one click away from our CIL demos: <a href="https://mybinder.org/v2/gh/TomographicImaging/CIL-Demos/HEAD?urlpath=lab/tree/binder%2Findex.ipynb"><img src="https://mybinder.org/badge_logo.svg" alt="Binder" /></a></p>
  </li>
  <li>
    <p>Google Colab: Google Colaboratory, or “Colab” is a cloud-based Jupyter notebook environment. It runs on Google Cloud Platform (GCP), and provides free access to GPUs and TPUs with many pre-installed scientific libraries.</p>
  </li>
</ul>

<h2 id="binder-or-colab-">Binder or Colab <a class="anchor" id="subsection21"></a></h2>

<p>In my opinion, the easiest choice to check some interactive jupyter demos and see the interface of an open source software, is Binder. However, in this case only CPU is available which is not the best option for tomography imaging. Also, you have limited memory and space if you want to upload some tomography datasets. A couple years ago, Binder was quite fast when building your image and if the image was recently built you could see the interactive demos in less than one minute. Nowdays, Binderhub servers have a lot of activity with many users and requesting a server can take a lot of time and sometimes you will receive a message such as : <em>Found built image, launching… Too many users on this BinderHub! Try again soon.</em>.</p>

<p>In the case of Colab, we have the option of a free GPU up to 16Gb, which is very useful for tomography imaging and reconstruction. Also, you can upload some datasets to your personal google drive. However, CIL or other packages are not pre-installed in you jupyter environment. Therefore, we need to use <code class="language-plaintext highlighter-rouge">pip</code> or <code class="language-plaintext highlighter-rouge">conda</code> to install our software. Pip is the default option to install python libraries on Google Colab, e.g., <code class="language-plaintext highlighter-rouge">!pip install name_of_package</code>. Unfortunately, Conda is not available by default and we need to install it first and then use it, e.g., <code class="language-plaintext highlighter-rouge">!conda install name_of_package</code>.</p>

<p><strong>Please note that Colab has recently upgraded its default runtime to Python version 3.10.</strong>
The next version of Python (3.11) is scheduled to have its final regular bug fix release in April 2024. Previous version (Python 3.9) is available from the <code class="language-plaintext highlighter-rouge">Command Palette</code> (<code class="language-plaintext highlighter-rouge">Ctrl+Shift+P</code>) via the <code class="language-plaintext highlighter-rouge">Use fallback runtime version</code> command when connected to a runtime. This will be available until mid-May 2023. See <a href="https://medium.com/google-colab/colab-updated-to-python-3-10-27eb02daa162">here</a> for more information.</p>

<h2 id="install-cil-on-colab-">Install CIL on Colab <a class="anchor" id="section3"></a></h2>

<p>In this section, we discuss how to install CIL and all its dependencies on Google Colab required for this notebook. In CIL, we provide wrappers for two tomography backends: 1) <a href="https://github.com/astra-toolbox/astra-toolbox">Astra-Toolbox</a> and 2) <a href="https://github.com/CERN/TIGRE">TIGRE</a>. In addition, we are going to use the <a href="https://github.com/vais-ral/CCPi-Regularisation-Toolkit">CCPi-Regularisation-Toolkit</a> which provides a set of 2D/3D regularisation methods with CPU/GPU acceleration. We follow the installation steps below:</p>

<p>1) Check python version on your current jupyter session. It should be <code class="language-plaintext highlighter-rouge">Python &gt;=3.10</code>.</p>

<p>2) Install TIGRE tomography backend following similar steps to <a href="https://github.com/CERN/TIGRE/blob/master/Frontispiece/python_installation.md">Python installation</a>.</p>

<p>2) Install the <a href="https://github.com/conda-incubator/condacolab">condacolab</a> package. This is the easiest way to install install <code class="language-plaintext highlighter-rouge">conda</code> on google colab.</p>

<p>3) Import <code class="language-plaintext highlighter-rouge">condacolab</code> and install <code class="language-plaintext highlighter-rouge">conda</code>.</p>

<p>5) Install CIL with the Astra-Toolbox backend and the CCPi-Regularisation Toolkit using <code class="language-plaintext highlighter-rouge">conda</code>.</p>

<p>You can try this notebook directly on Google Colab.</p>

<h3 id="check-python-version-">Check Python version <a class="anchor" id="subsection31"></a></h3>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!python --version
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Python 3.10.11
</code></pre></div></div>

<h3 id="install-tigre-">Install TIGRE <a class="anchor" id="subsection32"></a></h3>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!git clone https://github.com/CERN/TIGRE.git
%cd TIGRE/Python
!python setup.py install
!python example.py
</code></pre></div></div>

<h3 id="install-condacolab-">Install CondaColab <a class="anchor" id="subsection33"></a></h3>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!pip install -q condacolab
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">condacolab</span>
</code></pre></div></div>

<h3 id="install-conda-">Install Conda <a class="anchor" id="subsection34"></a></h3>

<p><strong>Note:</strong> Please wait for the kernel to restart.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">condacolab</span><span class="p">.</span><span class="nf">install</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="install-cil-">Install CIL <a class="anchor" id="subsection35"></a></h3>

<p>Using the command below we install CIL, Astra-Toolbox and the CCPi-Regularisation toolkit via <code class="language-plaintext highlighter-rouge">conda</code> or <code class="language-plaintext highlighter-rouge">mamba</code>. We are going to use <a href="https://github.com/mamba-org/mamba">Mamba</a>, a fast cross-platform package manager from <a href="https://quantstack.net/">Quantstack</a>.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
!mamba install -c conda-forge -c intel -c ccpi cil=23.0.1 astra-toolbox ccpi-regulariser "ipywidgets&lt;8" --quiet
!cp -r /usr/local/lib/python3.10/site-packages/astra_toolbox-2.0.0-py3.10-linux-x86_64.egg/astra /usr/local/lib/python3.10/site-packages/

</code></pre></div></div>

<h3 id="check-cil-version">Check CIL version</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cil.version</span>
<span class="nf">print</span><span class="p">(</span><span class="n">cil</span><span class="p">.</span><span class="n">version</span><span class="p">.</span><span class="n">version</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>23.0.1
</code></pre></div></div>

<h2 id="tomography-reconstruction-using-cil-">Tomography reconstruction using CIL <a class="anchor" id="section4"></a></h2>

<p>We are now ready to use CIL to perform tomography reconstruction on a real tomography dataset.</p>

<h3 id="limited-angle-tomography-reconstruction">Limited Angle Tomography Reconstruction</h3>

<p>We are going to use a three-dimensional parallel-beam X-ray CT real dataset from Beamline I13-2, Diamond Light Source, Harwell, UK.</p>

<p>The sample consisted of a 0.5 mm aluminium cylinder with a piece of steel wire embedded in a small drilled hole. A droplet of salt water was placed on top, causing corrosion to form hydrogen bubbles. The dataset, which was part of a fast time-lapse experiment, consists of 91 projections over 180, originally acquired as size 2560-by-2160 pixels, and it is downsampled to 160-by-135 pixels see <a href="https://github.com/DiamondLightSource/Savu/blob/master/test_data/data/24737_fd.nxs">here</a>.</p>

<p>We reconstruct this dataset using analytic and iterative reconstruction methods with a limited number of projections:</p>

<ul>
  <li>
    <p>the Filtered Back Projection (FBP) algorithm,</p>
  </li>
  <li>
    <p>Total variation (TV) regularisation under a non-negativity constraint</p>

    <p><a class="anchor" id="tv_reg"></a>
  \(\begin{equation}
  \underset{u}{\operatorname{argmin}} \frac{1}{2} \| A u - d\|^{2}_{2} + \alpha\,\mathrm{TV}(u) + \mathbb{I}_{\{u\geq0\}}(u) 
  \end{equation}\)</p>

    <p>where, \(d\) is the noisy sinogram and \(A\) is the Projection operator.</p>
  </li>
</ul>

<h3 id="import-libraries-">Import libraries <a class="anchor" id="subsection41"></a></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">cil.framework</span> <span class="kn">import</span>  <span class="n">AcquisitionGeometry</span>
<span class="kn">from</span> <span class="n">cil.processors</span> <span class="kn">import</span> <span class="n">TransmissionAbsorptionConverter</span><span class="p">,</span> <span class="n">Slicer</span><span class="p">,</span> <span class="n">CentreOfRotationCorrector</span>
<span class="kn">from</span> <span class="n">cil.optimisation.functions</span> <span class="kn">import</span> <span class="n">L2NormSquared</span>
<span class="kn">from</span> <span class="n">cil.optimisation.algorithms</span> <span class="kn">import</span> <span class="n">PDHG</span>
<span class="kn">from</span> <span class="n">cil.utilities.display</span> <span class="kn">import</span> <span class="n">show2D</span><span class="p">,</span> <span class="n">show_geometry</span>
<span class="kn">from</span> <span class="n">cil.utilities</span> <span class="kn">import</span> <span class="n">dataexample</span>
<span class="kn">from</span> <span class="n">cil.utilities.jupyter</span> <span class="kn">import</span> <span class="n">islicer</span>
<span class="kn">from</span> <span class="n">cil.plugins.ccpi_regularisation.functions</span> <span class="kn">import</span> <span class="n">FGP_TV</span>

<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
</code></pre></div></div>

<h3 id="import-tomography-backends-astra-and-tigre-">Import tomography backends: ASTRA and TIGRE <a class="anchor" id="subsection42"></a></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Astra Backend
</span><span class="kn">from</span> <span class="n">cil.plugins.astra</span> <span class="kn">import</span> <span class="n">ProjectionOperator</span> <span class="k">as</span> <span class="n">AstraProjectionOperator</span>
<span class="kn">from</span> <span class="n">cil.plugins.astra</span> <span class="kn">import</span> <span class="n">FBP</span> <span class="k">as</span> <span class="n">AstraFBP</span>

<span class="c1"># TIGRE backend
</span><span class="kn">from</span> <span class="n">cil.plugins.tigre</span> <span class="kn">import</span> <span class="n">ProjectionOperator</span> <span class="k">as</span> <span class="n">TigreProjectionOperator</span>
<span class="kn">from</span> <span class="n">cil.plugins.tigre</span> <span class="kn">import</span> <span class="n">FBP</span> <span class="k">as</span> <span class="n">TigreFBP</span>
</code></pre></div></div>

<h3 id="load-and-examine-dataset-">Load and examine dataset <a class="anchor" id="subsection43"></a></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># data_raw = dataexample.SYNCHROTRON_PARALLEL_BEAM_DATA.get() # local installation
</span><span class="n">data_raw</span> <span class="o">=</span> <span class="n">dataexample</span><span class="p">.</span><span class="n">SYNCHROTRON_PARALLEL_BEAM_DATA</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">data_dir</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/usr/local/share/cil</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># google colab 
</span></code></pre></div></div>

<h3 id="preprocess-acquisition-data-">Preprocess Acquisition Data <a class="anchor" id="subsection44"></a></h3>

<p>In the code above, we preprocess our acquired data:</p>

<ul>
  <li>Convert to Absorption using the <a href="https://en.wikipedia.org/wiki/Beer%E2%80%93Lambert_law">Beer-Lambert</a> law.</li>
  <li>Correct for centre of rotation artifacts.</li>
  <li>Simulate a limited angled tomography dataset. Our raw data has 91 projections, but we are going to use only 15 of them.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">background</span> <span class="o">=</span> <span class="n">data_raw</span><span class="p">.</span><span class="nf">get_slice</span><span class="p">(</span><span class="n">vertical</span><span class="o">=</span><span class="mi">20</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">data_raw</span> <span class="o">/=</span> <span class="n">background</span>

<span class="c1"># Lambert-Beer law
</span><span class="n">data_abs</span> <span class="o">=</span> <span class="nc">TransmissionAbsorptionConverter</span><span class="p">()(</span><span class="n">data_raw</span><span class="p">)</span>
<span class="n">data_crop</span> <span class="o">=</span> <span class="nc">Slicer</span><span class="p">(</span><span class="n">roi</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">vertical</span><span class="sh">'</span><span class="p">:</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">None</span><span class="p">)})(</span><span class="n">data_abs</span><span class="p">)</span>

<span class="c1"># Reorder the shape of sinogram only if astra backend is used
</span><span class="n">data_crop</span><span class="p">.</span><span class="nf">reorder</span><span class="p">(</span><span class="n">order</span><span class="o">=</span><span class="sh">'</span><span class="s">astra</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Correct centre of rotation artifacts
</span><span class="n">data_centred</span> <span class="o">=</span> <span class="n">CentreOfRotationCorrector</span><span class="p">.</span><span class="nf">xcorrelation</span><span class="p">()(</span><span class="n">data_crop</span><span class="p">)</span>

<span class="c1"># Reduce number of projections
</span><span class="n">data_sliced</span> <span class="o">=</span> <span class="nc">Slicer</span><span class="p">(</span><span class="n">roi</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">angle</span><span class="sh">'</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="sh">'</span><span class="s">horizontal</span><span class="sh">'</span><span class="p">:</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">140</span><span class="p">,</span><span class="mi">1</span><span class="p">)})(</span><span class="n">data_centred</span><span class="p">)</span>

<span class="c1"># Get acquisition geometry
</span><span class="n">ag</span> <span class="o">=</span> <span class="n">data_sliced</span><span class="p">.</span><span class="n">geometry</span>

<span class="c1"># Get image geometry
</span><span class="n">ig</span> <span class="o">=</span> <span class="n">ag</span><span class="p">.</span><span class="nf">get_ImageGeometry</span><span class="p">()</span>

</code></pre></div></div>

<h3 id="show-acquisition-geometry">Show Acquisition Geometry</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">show_geometry</span><span class="p">(</span><span class="n">ag</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/img/blogs/CIL_Cloud_files/CIL_Cloud_29_0.png" width="720" /></p>

<h3 id="run-analytic-reconstruction-fbp-using-astra-and-tigre-">Run analytic reconstruction: FBP using Astra and Tigre <a class="anchor" id="subsection45"></a></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_sliced</span><span class="p">.</span><span class="nf">reorder</span><span class="p">(</span><span class="sh">'</span><span class="s">tigre</span><span class="sh">'</span><span class="p">)</span>
<span class="n">fbp_recon_tigre</span> <span class="o">=</span> <span class="nc">TigreFBP</span><span class="p">(</span><span class="n">ig</span><span class="p">,</span> <span class="n">ag</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="sh">'</span><span class="s">gpu</span><span class="sh">'</span><span class="p">)(</span><span class="n">data_sliced</span><span class="p">)</span>

<span class="n">data_sliced</span><span class="p">.</span><span class="nf">reorder</span><span class="p">(</span><span class="sh">'</span><span class="s">astra</span><span class="sh">'</span><span class="p">)</span>
<span class="n">fbp_recon_astra</span> <span class="o">=</span> <span class="nc">AstraFBP</span><span class="p">(</span><span class="n">ig</span><span class="p">,</span> <span class="n">ag</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="sh">'</span><span class="s">gpu</span><span class="sh">'</span><span class="p">)(</span><span class="n">data_sliced</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># visualise reconstruction results
</span><span class="nf">show2D</span><span class="p">(</span><span class="n">fbp_recon_astra</span><span class="p">,</span> <span class="n">slice_list</span><span class="o">=</span><span class="p">[(</span><span class="sh">'</span><span class="s">vertical</span><span class="sh">'</span><span class="p">,</span><span class="mi">80</span><span class="p">),</span> 
                              <span class="p">(</span><span class="sh">'</span><span class="s">horizontal_y</span><span class="sh">'</span><span class="p">,</span><span class="mi">50</span><span class="p">),</span> 
                              <span class="p">(</span><span class="sh">'</span><span class="s">horizontal_x</span><span class="sh">'</span><span class="p">,</span><span class="mi">50</span><span class="p">)],</span> \
        <span class="n">cmap</span><span class="o">=</span><span class="sh">"</span><span class="s">inferno</span><span class="sh">"</span><span class="p">,</span> <span class="n">num_cols</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span> <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Astra: FBP reconstruction</span><span class="sh">"</span><span class="p">,</span> 
       <span class="n">fix_range</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.1</span><span class="p">),</span>
       <span class="n">origin</span><span class="o">=</span><span class="sh">'</span><span class="s">upper-left</span><span class="sh">'</span><span class="p">)</span>

<span class="nf">show2D</span><span class="p">(</span><span class="n">fbp_recon_tigre</span><span class="p">,</span> <span class="n">slice_list</span><span class="o">=</span><span class="p">[(</span><span class="sh">'</span><span class="s">vertical</span><span class="sh">'</span><span class="p">,</span><span class="mi">80</span><span class="p">),</span> 
                              <span class="p">(</span><span class="sh">'</span><span class="s">horizontal_y</span><span class="sh">'</span><span class="p">,</span><span class="mi">50</span><span class="p">),</span> 
                              <span class="p">(</span><span class="sh">'</span><span class="s">horizontal_x</span><span class="sh">'</span><span class="p">,</span><span class="mi">50</span><span class="p">)],</span> \
        <span class="n">cmap</span><span class="o">=</span><span class="sh">"</span><span class="s">inferno</span><span class="sh">"</span><span class="p">,</span> <span class="n">num_cols</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span> <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Tigre: FBP reconstruction</span><span class="sh">"</span><span class="p">,</span> 
       <span class="n">fix_range</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.1</span><span class="p">),</span>
       <span class="n">origin</span><span class="o">=</span><span class="sh">'</span><span class="s">upper-left</span><span class="sh">'</span><span class="p">)</span>

</code></pre></div></div>

<p><img src="/assets/img/blogs/CIL_Cloud_files/CIL_Cloud_32_0.png" width="720" />  <br />
<img src="/assets/img/blogs/CIL_Cloud_files/CIL_Cloud_32_1.png" width="720" /></p>

<h3 id="run-model-based-iterative-reconstruction-total-variation-reconstruction-">Run Model-Based iterative reconstruction: Total variation reconstruction <a class="anchor" id="subsection46"></a></h3>

<p>The images on the first column are perfect if you are interested to very cool and futuristic star-shaped art. If we examine other slices they are far from perfect for tomography reconstruction. These artifacts are well known when we use analytic reconstruction algoritms on data with a limited number of projections, see <a href="https://royalsocietypublishing.org/doi/abs/10.1098/rsta.2020.0192">Core Imaging Library–Part I: a versatile Python framework for tomographic imaging</a>.</p>

<p>To reduce these artifacts, we are going to use <strong>Model-Based Iterative Reconstruction (MBIR)</strong> algorithms. We use the <a href="https://link.springer.com/article/10.1007/s10851-010-0251-1">Primal-Dual Hybrid Gradient (PDHG)</a>
with <a href="https://en.wikipedia.org/wiki/Total_variation">Total Variation (TV)</a> regularisation under a non-negativity constraint.</p>

<p>The PDHG algorithm solves the following problem:</p>

<p><a id="pdhg_alg"></a>
\(\begin{equation}
\underset{x\in \mathbb{X} }{\operatorname{argmin}} f(Kx) + g(x)
\tag{2}
\end{equation}\)</p>

<p>which is the sum of a composite function \(f\) with a linear operator \(K\) and a proximable function \(g\).</p>

<p>So, in order to use the PDHG algorithm in CIL, we need to find the triplet $(f, g, K)$ in order to express the minimisation problem <a href="#tv_reg">(1)</a> to the general PDHG form <a href="#pdhg_alg">(2)</a>.</p>

<ul>
  <li>
    <p>In our case, we have \(K = A\) , i.e., our Astra projection operator <code class="language-plaintext highlighter-rouge">A = AstraProjectionOperator(ig, ag, device="gpu")</code> <strong>Note: cpu option is not available for the TIGRE backend</strong></p>
  </li>
  <li>
    <p>The first term in <a href="#tv_reg">(1)</a>, also called <strong>fidelity term</strong>, is \(f(u) = \frac{1}{2}\|Au - d\|^{2}\) and in CIL syntax, is <code class="language-plaintext highlighter-rouge">F = LeastSquares(A=A, b=data_centred, c=0.5)</code></p>
  </li>
  <li>
    <p>The second term in <a href="#tv_reg">(1)</a> is the TV <strong>regulariser</strong> with a non-negativity constraint and in CIL syntax is <code class="language-plaintext highlighter-rouge">G = alpha * FGP_TV(nonnegativity=True, device = "gpu")</code>, where <code class="language-plaintext highlighter-rouge">alpha</code> is the regularisation parameter.</p>
  </li>
</ul>

<p>Now, it is time to run the PDHG algorithm, for 100 iterations. We can initialise our algorithm from an array of zeros, <code class="language-plaintext highlighter-rouge">ig.allocate()</code> or the previous FBP reconstruction. We also print the objective of the primal problem every 10 iterations using <code class="language-plaintext highlighter-rouge">verbose=1</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Projection Operator
</span><span class="n">A</span> <span class="o">=</span> <span class="nc">AstraProjectionOperator</span><span class="p">(</span><span class="n">ig</span><span class="p">,</span> <span class="n">ag</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="sh">"</span><span class="s">gpu</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Fidelity term
</span><span class="n">F</span> <span class="o">=</span> <span class="mf">0.5</span><span class="o">*</span><span class="nc">L2NormSquared</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">data_sliced</span><span class="p">)</span>

<span class="c1"># TV regularization
</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.2</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="nc">FGP_TV</span><span class="p">(</span><span class="n">nonnegativity</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">device</span> <span class="o">=</span> <span class="sh">"</span><span class="s">gpu</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># setup and run PDHG algorithm
</span><span class="n">pdhg</span> <span class="o">=</span> <span class="nc">PDHG</span><span class="p">(</span><span class="n">initial</span><span class="o">=</span><span class="n">fbp_recon_astra</span><span class="p">,</span> <span class="n">f</span><span class="o">=</span><span class="n">F</span><span class="p">,</span> <span class="n">g</span><span class="o">=</span><span class="n">G</span><span class="p">,</span> <span class="n">operator</span><span class="o">=</span><span class="n">A</span><span class="p">,</span> 
            <span class="n">update_objective_interval</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="n">max_iteration</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">pdhg</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     Iter   Max Iter     Time/Iter            Objective
                               [s]                     
        0        100         0.000          3.81659e+03
       10        100         0.176          1.78921e+02
       20        100         0.172          1.60171e+02
       30        100         0.172          1.56264e+02
       40        100         0.175          1.55244e+02
       50        100         0.175          1.54886e+02
       60        100         0.176          1.54706e+02
       70        100         0.175          1.54649e+02
       80        100         0.176          1.54622e+02
       90        100         0.176          1.54605e+02
      100        100         0.177          1.54597e+02
-------------------------------------------------------
      100        100         0.177          1.54597e+02
Stop criterion has been reached.
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">show2D</span><span class="p">(</span><span class="n">pdhg</span><span class="p">.</span><span class="n">solution</span><span class="p">,</span> <span class="n">slice_list</span><span class="o">=</span><span class="p">[(</span><span class="sh">'</span><span class="s">vertical</span><span class="sh">'</span><span class="p">,</span><span class="mi">80</span><span class="p">),</span> 
                              <span class="p">(</span><span class="sh">'</span><span class="s">horizontal_y</span><span class="sh">'</span><span class="p">,</span><span class="mi">50</span><span class="p">),</span> 
                              <span class="p">(</span><span class="sh">'</span><span class="s">horizontal_x</span><span class="sh">'</span><span class="p">,</span><span class="mi">50</span><span class="p">)],</span> \
        <span class="n">cmap</span><span class="o">=</span><span class="sh">"</span><span class="s">inferno</span><span class="sh">"</span><span class="p">,</span> <span class="n">num_cols</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">TV: alpha = {}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">alpha</span><span class="p">),</span>
        <span class="n">fix_range</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.1</span><span class="p">),</span> <span class="n">origin</span><span class="o">=</span><span class="sh">'</span><span class="s">upper</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/img/blogs/CIL_Cloud_files/CIL_Cloud_35_0.png" width="720" /></p>

<h2 id="discussion-">Discussion <a class="anchor" id="subsection47"></a></h2>

<p>Using the iterative reconstruction approach, we successfully eliminated the noise and streak artifacts from our initial analytic reconstruction. However, in order to determine whether the resulting reconstruction is good or bad requires further evaluation and assessment. For this particular dataset, we can perform the following comparison. We can reconstruct our dataset using all 91 projections with the FBP algorithm and compare it with our TV reconstructed image.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_full</span> <span class="o">=</span> <span class="nc">Slicer</span><span class="p">(</span><span class="n">roi</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">horizontal</span><span class="sh">'</span><span class="p">:</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">140</span><span class="p">,</span><span class="mi">1</span><span class="p">)})(</span><span class="n">data_centred</span><span class="p">)</span>
<span class="n">ag_full</span> <span class="o">=</span> <span class="n">data_full</span><span class="p">.</span><span class="n">geometry</span>
<span class="n">ig_full</span> <span class="o">=</span> <span class="n">ag_full</span><span class="p">.</span><span class="nf">get_ImageGeometry</span><span class="p">()</span>
<span class="n">fbp_full_astra</span> <span class="o">=</span> <span class="nc">AstraFBP</span><span class="p">(</span><span class="n">ig_full</span><span class="p">,</span> <span class="n">ag_full</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="sh">'</span><span class="s">gpu</span><span class="sh">'</span><span class="p">)(</span><span class="n">data_full</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">all_recons</span> <span class="o">=</span> <span class="p">[</span><span class="n">fbp_full_astra</span><span class="p">.</span><span class="nf">get_slice</span><span class="p">(</span><span class="n">vertical</span><span class="o">=</span><span class="mi">80</span><span class="p">),</span> <span class="n">fbp_recon_astra</span><span class="p">.</span><span class="nf">get_slice</span><span class="p">(</span><span class="n">vertical</span><span class="o">=</span><span class="mi">80</span><span class="p">),</span> <span class="n">pdhg</span><span class="p">.</span><span class="n">solution</span><span class="p">.</span><span class="nf">get_slice</span><span class="p">(</span><span class="n">vertical</span><span class="o">=</span><span class="mi">80</span><span class="p">),</span>
              <span class="n">fbp_full_astra</span><span class="p">.</span><span class="nf">get_slice</span><span class="p">(</span><span class="n">horizontal_y</span><span class="o">=</span><span class="mi">50</span><span class="p">),</span> <span class="n">fbp_recon_astra</span><span class="p">.</span><span class="nf">get_slice</span><span class="p">(</span><span class="n">horizontal_y</span><span class="o">=</span><span class="mi">50</span><span class="p">),</span> <span class="n">pdhg</span><span class="p">.</span><span class="n">solution</span><span class="p">.</span><span class="nf">get_slice</span><span class="p">(</span><span class="n">horizontal_y</span><span class="o">=</span><span class="mi">50</span><span class="p">),</span>
              <span class="n">fbp_full_astra</span><span class="p">.</span><span class="nf">get_slice</span><span class="p">(</span><span class="n">horizontal_x</span><span class="o">=</span><span class="mi">50</span><span class="p">),</span> <span class="n">fbp_recon_astra</span><span class="p">.</span><span class="nf">get_slice</span><span class="p">(</span><span class="n">horizontal_x</span><span class="o">=</span><span class="mi">50</span><span class="p">),</span> <span class="n">pdhg</span><span class="p">.</span><span class="n">solution</span><span class="p">.</span><span class="nf">get_slice</span><span class="p">(</span><span class="n">horizontal_x</span><span class="o">=</span><span class="mi">50</span><span class="p">)]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">mpl_toolkits.axes_grid1</span> <span class="kn">import</span> <span class="n">AxesGrid</span>
<span class="kn">from</span> <span class="n">mpl_toolkits.axes_grid1.anchored_artists</span> <span class="kn">import</span> <span class="n">AnchoredSizeBar</span>     

<span class="n">labels_x</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">FBP</span><span class="se">\n</span><span class="s"> All data</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">FBP</span><span class="se">\n</span><span class="s"> Limited data</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">TV reconstruction</span><span class="se">\n</span><span class="s"> Limited data</span><span class="sh">"</span><span class="p">]</span>
<span class="n">labels_y</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">Vertical</span><span class="se">\n</span><span class="s"> slice = 80</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Horizontal_y</span><span class="se">\n</span><span class="s"> slice = 50</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Horizontal_x</span><span class="se">\n</span><span class="s"> slice = 50</span><span class="sh">"</span><span class="p">]</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span>
<span class="n">nrows</span><span class="p">,</span> <span class="n">ncols</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span>
<span class="n">grid</span> <span class="o">=</span> <span class="nc">AxesGrid</span><span class="p">(</span><span class="n">fig</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span>
                <span class="n">nrows_ncols</span><span class="o">=</span><span class="p">(</span><span class="n">nrows</span><span class="p">,</span> <span class="n">ncols</span><span class="p">),</span>
                <span class="n">axes_pad</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span>
                <span class="n">cbar_mode</span><span class="o">=</span><span class="sh">'</span><span class="s">single</span><span class="sh">'</span><span class="p">,</span>
                <span class="n">cbar_location</span><span class="o">=</span><span class="sh">'</span><span class="s">bottom</span><span class="sh">'</span><span class="p">,</span>
                <span class="n">cbar_size</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span>
                <span class="n">cbar_pad</span><span class="o">=</span><span class="mf">0.1</span>
                <span class="p">)</span>

<span class="n">k</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">grid</span><span class="p">:</span>

    <span class="n">im</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">all_recons</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">array</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">"</span><span class="s">inferno</span><span class="sh">"</span><span class="p">)</span>
    
                  
    <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]:</span>
        <span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="n">labels_x</span><span class="p">[</span><span class="n">k</span><span class="p">],</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
        
    <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">]:</span>
        <span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="n">labels_y</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">divmod</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">nrows</span><span class="p">)[</span><span class="mi">0</span><span class="p">]],</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> <span class="n">labelpad</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
                  
                
    <span class="n">ax</span><span class="p">.</span><span class="nf">set_xticks</span><span class="p">([])</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">set_yticks</span><span class="p">([])</span>
    <span class="n">k</span><span class="o">+=</span><span class="mi">1</span>
    
<span class="n">cbar</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">cax</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/blogs/CIL_Cloud_files/CIL_Cloud_39_0.png" width="720" /></p>

<h2 id="more-cil-demos-">More CIL-Demos <a class="anchor" id="section5"></a></h2>

<p>To try more demos on Google Colab, please visit our <a href="https://github.com/TomographicImaging/CIL-Demos">CIL-Demos</a> repository and load one of our notebooks to the Google Colab platform and repeat the installation steps above. Please note that for some notebooks you need to download first the dataset required to run the notebook.</p>]]></content><author><name></name></author><category term="CIL" /><summary type="html"><![CDATA[Tomography reconstruction on the Cloud]]></summary></entry><entry><title type="html">a post with giscus comments</title><link href="epapoutsellis/blog/2022/giscus-comments/" rel="alternate" type="text/html" title="a post with giscus comments" /><published>2022-12-10T15:59:00+00:00</published><updated>2022-12-10T15:59:00+00:00</updated><id>epapoutsellis/blog/2022/giscus-comments</id><content type="html" xml:base="epapoutsellis/blog/2022/giscus-comments/"><![CDATA[<p>This post shows how to add GISCUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">a post with redirect</title><link href="epapoutsellis/blog/2022/redirect/" rel="alternate" type="text/html" title="a post with redirect" /><published>2022-02-01T17:39:00+00:00</published><updated>2022-02-01T17:39:00+00:00</updated><id>epapoutsellis/blog/2022/redirect</id><content type="html" xml:base="epapoutsellis/blog/2022/redirect/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[you can also redirect to assets like pdf]]></summary></entry><entry><title type="html">a post with diagrams</title><link href="epapoutsellis/blog/2021/diagrams/" rel="alternate" type="text/html" title="a post with diagrams" /><published>2021-07-04T17:39:00+00:00</published><updated>2021-07-04T17:39:00+00:00</updated><id>epapoutsellis/blog/2021/diagrams</id><content type="html" xml:base="epapoutsellis/blog/2021/diagrams/"><![CDATA[<p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin.
Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p>

<p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine.
Also, be mindful of that because of diagram generation the fist time you build your Jekyll website after adding new diagrams will be SLOW.
For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p>

<h2 id="mermaid">Mermaid</h2>

<p>Install mermaid using <code class="language-plaintext highlighter-rouge">node.js</code> package manager <code class="language-plaintext highlighter-rouge">npm</code> by running the following command:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> mermaid.cli
</code></pre></div></div>

<p>The diagram below was generated by the following code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div>

<div class="jekyll-diagrams diagrams mermaid">
  <svg id="mermaid-1686127229020" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1686127229020 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1686127229020 .node circle,#mermaid-1686127229020 .node ellipse,#mermaid-1686127229020 .node polygon,#mermaid-1686127229020 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1686127229020 .node.clickable{cursor:pointer}#mermaid-1686127229020 .arrowheadPath{fill:#333}#mermaid-1686127229020 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1686127229020 .edgeLabel{background-color:#e8e8e8}#mermaid-1686127229020 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1686127229020 .cluster text{fill:#333}#mermaid-1686127229020 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1686127229020 .actor{stroke:#ccf;fill:#ececff}#mermaid-1686127229020 text.actor{fill:#000;stroke:none}#mermaid-1686127229020 .actor-line{stroke:grey}#mermaid-1686127229020 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1686127229020 .messageLine0,#mermaid-1686127229020 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1686127229020 #arrowhead{fill:#333}#mermaid-1686127229020 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1686127229020 .messageText{fill:#333;stroke:none}#mermaid-1686127229020 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1686127229020 .labelText,#mermaid-1686127229020 .loopText{fill:#000;stroke:none}#mermaid-1686127229020 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1686127229020 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1686127229020 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1686127229020 .section{stroke:none;opacity:.2}#mermaid-1686127229020 .section0{fill:rgba(102,102,255,.49)}#mermaid-1686127229020 .section2{fill:#fff400}#mermaid-1686127229020 .section1,#mermaid-1686127229020 .section3{fill:#fff;opacity:.2}#mermaid-1686127229020 .sectionTitle0,#mermaid-1686127229020 .sectionTitle1,#mermaid-1686127229020 .sectionTitle2,#mermaid-1686127229020 .sectionTitle3{fill:#333}#mermaid-1686127229020 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1686127229020 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1686127229020 .grid path{stroke-width:0}#mermaid-1686127229020 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1686127229020 .task{stroke-width:2}#mermaid-1686127229020 .taskText{text-anchor:middle;font-size:11px}#mermaid-1686127229020 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1686127229020 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1686127229020 .taskText0,#mermaid-1686127229020 .taskText1,#mermaid-1686127229020 .taskText2,#mermaid-1686127229020 .taskText3{fill:#fff}#mermaid-1686127229020 .task0,#mermaid-1686127229020 .task1,#mermaid-1686127229020 .task2,#mermaid-1686127229020 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1686127229020 .taskTextOutside0,#mermaid-1686127229020 .taskTextOutside1,#mermaid-1686127229020 .taskTextOutside2,#mermaid-1686127229020 .taskTextOutside3{fill:#000}#mermaid-1686127229020 .active0,#mermaid-1686127229020 .active1,#mermaid-1686127229020 .active2,#mermaid-1686127229020 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1686127229020 .activeText0,#mermaid-1686127229020 .activeText1,#mermaid-1686127229020 .activeText2,#mermaid-1686127229020 .activeText3{fill:#000!important}#mermaid-1686127229020 .done0,#mermaid-1686127229020 .done1,#mermaid-1686127229020 .done2,#mermaid-1686127229020 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1686127229020 .doneText0,#mermaid-1686127229020 .doneText1,#mermaid-1686127229020 .doneText2,#mermaid-1686127229020 .doneText3{fill:#000!important}#mermaid-1686127229020 .crit0,#mermaid-1686127229020 .crit1,#mermaid-1686127229020 .crit2,#mermaid-1686127229020 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1686127229020 .activeCrit0,#mermaid-1686127229020 .activeCrit1,#mermaid-1686127229020 .activeCrit2,#mermaid-1686127229020 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1686127229020 .doneCrit0,#mermaid-1686127229020 .doneCrit1,#mermaid-1686127229020 .doneCrit2,#mermaid-1686127229020 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1686127229020 .activeCritText0,#mermaid-1686127229020 .activeCritText1,#mermaid-1686127229020 .activeCritText2,#mermaid-1686127229020 .activeCritText3,#mermaid-1686127229020 .doneCritText0,#mermaid-1686127229020 .doneCritText1,#mermaid-1686127229020 .doneCritText2,#mermaid-1686127229020 .doneCritText3{fill:#000!important}#mermaid-1686127229020 .titleText{text-anchor:middle;font-size:18px;fill:#000}#mermaid-1686127229020 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1686127229020 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1686127229020 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1686127229020 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1686127229020 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1686127229020 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1686127229020 #compositionEnd,#mermaid-1686127229020 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1686127229020 #aggregationEnd,#mermaid-1686127229020 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1686127229020 #dependencyEnd,#mermaid-1686127229020 #dependencyStart,#mermaid-1686127229020 #extensionEnd,#mermaid-1686127229020 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1686127229020 .branch-label,#mermaid-1686127229020 .commit-id,#mermaid-1686127229020 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1686127229020 {
    color: rgb(0, 0, 0);
    font: normal normal 400 normal 16px / normal "Times New Roman";
  }</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[an example of a blog post with diagrams]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="epapoutsellis/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post" /><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>epapoutsellis/blog/2021/distill</id><content type="html" xml:base="epapoutsellis/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2>

<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine.
You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>.
If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p>

<p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph.
Here is an example:</p>

\[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\]

<p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>

<hr />

<h2 id="citations">Citations</h2>

<p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag.
The key attribute is a reference to the id provided in the bibliography.
The key attribute can take multiple ids, separated by commas.</p>

<p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover).
If you have an appendix, a bibliography is automatically created and populated in it.</p>

<p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover.
However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p>

<hr />

<h2 id="footnotes">Footnotes</h2>

<p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag.
The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p>

<hr />

<h2 id="code-blocks">Code Blocks</h2>

<p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags.
An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>.
For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p>

<d-code block="" language="javascript">
  var x = 25;
  function(x) {
    return x * x;
  }
</d-code>

<p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode.
You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<hr />

<h2 id="interactive-plots">Interactive Plots</h2>

<p>You can add interative plots using plotly + iframes :framed_picture:</p>

<div class="l-page">
  <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe>
</div>

<p>The plot must be generated separately and saved into an HTML file.
To generate the plot that you see above, you can use the following code snippet:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
  <span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure>

<hr />

<h2 id="layouts">Layouts</h2>

<p>The main text column is referred to as the body.
It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p>

<div class="fake-img l-body">
  <p>.l-body</p>
</div>

<p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p>

<div class="fake-img l-page">
  <p>.l-page</p>
</div>

<p>All of these have an outset variant if you want to poke out from the body text a little bit.
For instance:</p>

<div class="fake-img l-body-outset">
  <p>.l-body-outset</p>
</div>

<div class="fake-img l-page-outset">
  <p>.l-page-outset</p>
</div>

<p>Occasionally you’ll want to use the full browser width.
For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>.
You can also inset the element a little from the edge of the browser by using the inset variant.</p>

<div class="fake-img l-screen">
  <p>.l-screen</p>
</div>
<div class="fake-img l-screen-inset">
  <p>.l-screen-inset</p>
</div>

<p>The final layout is for marginalia, asides, and footnotes.
It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p>

<div class="fake-img l-gutter">
  <p>.l-gutter</p>
</div>

<hr />

<h2 id="other-typography">Other Typography?</h2>

<p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p>

<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>

<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>

<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>

<ol>
  <li>First ordered list item</li>
  <li>Another item
⋅⋅* Unordered sub-list.</li>
  <li>Actual numbers don’t matter, just that it’s a number
⋅⋅1. Ordered sub-list</li>
  <li>And another item.</li>
</ol>

<p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p>

<p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>

<ul>
  <li>Unordered list can use asterisks</li>
  <li>Or minuses</li>
  <li>Or pluses</li>
</ul>

<p><a href="https://www.google.com">I’m an inline-style link</a></p>

<p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p>

<p><a href="https://www.mozilla.org">I’m a reference-style link</a></p>

<p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p>

<p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p>

<p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p>

<p>URLs and URLs in angle brackets will automatically get turned into links.
http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes
example.com (but not on Github, for example).</p>

<p>Some text to show that the reference links can follow later.</p>

<p>Here’s our logo (hover to see the title text):</p>

<p>Inline-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1" /></p>

<p>Reference-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2" /></p>

<p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div>

<p>Colons can be used to align columns.</p>

<table>
  <thead>
    <tr>
      <th>Tables</th>
      <th style="text-align: center">Are</th>
      <th style="text-align: right">Cool</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>col 3 is</td>
      <td style="text-align: center">right-aligned</td>
      <td style="text-align: right">$1600</td>
    </tr>
    <tr>
      <td>col 2 is</td>
      <td style="text-align: center">centered</td>
      <td style="text-align: right">$12</td>
    </tr>
    <tr>
      <td>zebra stripes</td>
      <td style="text-align: center">are neat</td>
      <td style="text-align: right">$1</td>
    </tr>
  </tbody>
</table>

<p>There must be at least 3 dashes separating each header cell.
The outer pipes (|) are optional, and you don’t need to make the
raw Markdown line up prettily. You can also use inline Markdown.</p>

<table>
  <thead>
    <tr>
      <th>Markdown</th>
      <th>Less</th>
      <th>Pretty</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>Still</em></td>
      <td><code class="language-plaintext highlighter-rouge">renders</code></td>
      <td><strong>nicely</strong></td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.</p>
</blockquote>

<p>Quote break.</p>

<blockquote>
  <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>
</blockquote>

<p>Here’s a line for us to start with.</p>

<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>

<p>This line is also a separate paragraph, but…
This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">a post with github metadata</title><link href="epapoutsellis/blog/2020/github-metadata/" rel="alternate" type="text/html" title="a post with github metadata" /><published>2020-09-28T21:01:00+00:00</published><updated>2020-09-28T21:01:00+00:00</updated><id>epapoutsellis/blog/2020/github-metadata</id><content type="html" xml:base="epapoutsellis/blog/2020/github-metadata/"><![CDATA[<p>A sample blog page that demonstrates the accessing of github meta data.</p>

<h2 id="what-does-github-metadata-do">What does Github-MetaData do?</h2>
<ul>
  <li>Propagates the site.github namespace with repository metadata</li>
  <li>Setting site variables :
    <ul>
      <li>site.title</li>
      <li>site.description</li>
      <li>site.url</li>
      <li>site.baseurl</li>
    </ul>
  </li>
  <li>Accessing the metadata - duh.</li>
  <li>Generating edittable links.</li>
</ul>

<h2 id="additional-reading">Additional Reading</h2>
<ul>
  <li>If you’re recieving incorrect/missing data, you may need to perform a Github API<a href="https://github.com/jekyll/github-metadata/blob/master/docs/authentication.md"> authentication</a>.</li>
  <li>Go through this <a href="https://jekyll.github.io/github-metadata/">README</a> for more details on the topic.</li>
  <li><a href="https://github.com/jekyll/github-metadata/blob/master/docs/site.github.md">This page</a> highlights all the feilds you can access with github-metadata.
<br /></li>
</ul>

<h2 id="example-metadata">Example MetaData</h2>
<ul>
  <li>Host Name :</li>
  <li>URL :</li>
  <li>BaseURL :</li>
  <li>Archived :</li>
  <li>Contributors :</li>
</ul>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[a quick run down on accessing github metadata.]]></summary></entry><entry><title type="html">a post with twitter</title><link href="epapoutsellis/blog/2020/twitter/" rel="alternate" type="text/html" title="a post with twitter" /><published>2020-09-28T15:12:00+00:00</published><updated>2020-09-28T15:12:00+00:00</updated><id>epapoutsellis/blog/2020/twitter</id><content type="html" xml:base="epapoutsellis/blog/2020/twitter/"><![CDATA[<p>A sample blog page that demonstrates the inclusion of Tweets/Timelines/etc.</p>

<h1 id="tweet">Tweet</h1>
<p>An example of displaying a tweet:</p>
<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<h1 id="timeline">Timeline</h1>
<p>An example of pulling from a timeline:</p>
<div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<h1 id="additional-details">Additional Details</h1>
<p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><category term="formatting" /><summary type="html"><![CDATA[an example of a blog post with twitter]]></summary></entry><entry><title type="html">a post with disqus comments</title><link href="epapoutsellis/blog/2015/disqus-comments/" rel="alternate" type="text/html" title="a post with disqus comments" /><published>2015-10-20T15:59:00+00:00</published><updated>2015-10-20T15:59:00+00:00</updated><id>epapoutsellis/blog/2015/disqus-comments</id><content type="html" xml:base="epapoutsellis/blog/2015/disqus-comments/"><![CDATA[<p>This post shows how to add DISQUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with disqus comments]]></summary></entry><entry><title type="html">a post with math</title><link href="epapoutsellis/blog/2015/math/" rel="alternate" type="text/html" title="a post with math" /><published>2015-10-20T15:12:00+00:00</published><updated>2015-10-20T15:12:00+00:00</updated><id>epapoutsellis/blog/2015/math</id><content type="html" xml:base="epapoutsellis/blog/2015/math/"><![CDATA[<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p>

<p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p>

\[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\]

<p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math.
MathJax will automatically number equations:</p>

<p>\begin{equation}
\label{eq:cauchy-schwarz}
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
\end{equation}</p>

<p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p>

<p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="formatting" /><category term="math" /><summary type="html"><![CDATA[an example of a blog post with some math]]></summary></entry><entry><title type="html">a post with code</title><link href="epapoutsellis/blog/2015/code/" rel="alternate" type="text/html" title="a post with code" /><published>2015-07-15T15:09:00+00:00</published><updated>2015-07-15T15:09:00+00:00</updated><id>epapoutsellis/blog/2015/code</id><content type="html" xml:base="epapoutsellis/blog/2015/code/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting.
It supports more than 100 languages.
This example is in C++.
All you have to do is wrap your code in a liquid tag:</p>

<p>{% highlight c++ linenos %}  <br /> code code code <br /> {% endhighlight %}</p>

<p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers.
Produces something like this:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="sample-posts" /><category term="formatting" /><category term="code" /><summary type="html"><![CDATA[an example of a blog post with some code]]></summary></entry></feed>